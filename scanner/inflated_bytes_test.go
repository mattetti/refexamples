package scanner_test

import (
	"bytes"
	"testing"

	"github.com/mattetti/refexamples/scanner"
)

func TestInflatedBytes(t *testing.T) {
	testCases := []struct {
		desc   string
		input  []byte
		output []byte
	}{
		{"empty reader", nil, nil},
		{"nothing inflated",
			[]byte{0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c},
			[]byte{},
		},
		{"nothing inflated but some magic bytes",
			[]byte{0xea, 0x65, 0x65, 0x1f, 0xfb, 0x1f, 0x1f, 0x2a, 0xfb, 0xfb, 0x55, 0x7c},
			[]byte{},
		},
		{"everything inflated",
			[]byte{0x1f, 0x8b, 0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c},
			[]byte{0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c},
		},
		{"end is inflated",
			[]byte{0xb9, 0x1f, 0xfb, 0x1f, 0x8b, 0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c},
			[]byte{0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c},
		},
		{"null terminated inflated",
			[]byte{0xb9, 0x1f, 0x1f, 0xfb, 0x1f, 0x8b, 0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c, 0x0, 0x42, 0x96},
			[]byte{0xea, 0x65, 0x65, 0xb9, 0xfb, 0xad, 0x70, 0x2a, 0x21, 0xd9, 0x55, 0x7c},
		},
	}

	for i, tc := range testCases {
		t.Logf("test case %d %s\n", i, tc.desc)
		r := bytes.NewReader(tc.input)
		o, err := scanner.InflatedBytes(r)
		if err != nil {
			t.Fatal(err)
		}
		if bytes.Compare(o, tc.output) != 0 {
			t.Fatalf("Table test failed, expected\n%#v\ngot\n%#v\n", tc.output, o)
		}
	}
}
